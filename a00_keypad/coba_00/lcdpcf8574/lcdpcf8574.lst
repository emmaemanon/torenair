   1               		.file	"lcdpcf8574.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  11               	toggle_e:
  12               	.LFB2:
  13               		.file 1 "lcdpcf8574/lcdpcf8574.c"
   1:lcdpcf8574/lcdpcf8574.c **** /*
   2:lcdpcf8574/lcdpcf8574.c **** lcdpcf8574 lib 0x01
   3:lcdpcf8574/lcdpcf8574.c **** 
   4:lcdpcf8574/lcdpcf8574.c **** copyright (c) Davide Gironi, 2013
   5:lcdpcf8574/lcdpcf8574.c **** 
   6:lcdpcf8574/lcdpcf8574.c **** Released under GPLv3.
   7:lcdpcf8574/lcdpcf8574.c **** Please refer to LICENSE file for licensing information.
   8:lcdpcf8574/lcdpcf8574.c **** */
   9:lcdpcf8574/lcdpcf8574.c **** 
  10:lcdpcf8574/lcdpcf8574.c **** #include <inttypes.h>
  11:lcdpcf8574/lcdpcf8574.c **** #include <avr/io.h>
  12:lcdpcf8574/lcdpcf8574.c **** #include <avr/pgmspace.h>
  13:lcdpcf8574/lcdpcf8574.c **** 
  14:lcdpcf8574/lcdpcf8574.c **** #include "../pcf8574/pcf8574.h"
  15:lcdpcf8574/lcdpcf8574.c **** 
  16:lcdpcf8574/lcdpcf8574.c **** #include "lcdpcf8574.h"
  17:lcdpcf8574/lcdpcf8574.c **** 
  18:lcdpcf8574/lcdpcf8574.c **** #define lcd_e_delay()   __asm__ __volatile__( "rjmp 1f\n 1:" );
  19:lcdpcf8574/lcdpcf8574.c **** #define lcd_e_toggle()  toggle_e()
  20:lcdpcf8574/lcdpcf8574.c **** 
  21:lcdpcf8574/lcdpcf8574.c **** #if LCD_LINES==1
  22:lcdpcf8574/lcdpcf8574.c **** #define LCD_FUNCTION_DEFAULT    LCD_FUNCTION_4BIT_1LINE 
  23:lcdpcf8574/lcdpcf8574.c **** #else
  24:lcdpcf8574/lcdpcf8574.c **** #define LCD_FUNCTION_DEFAULT    LCD_FUNCTION_4BIT_2LINES 
  25:lcdpcf8574/lcdpcf8574.c **** #endif
  26:lcdpcf8574/lcdpcf8574.c **** 
  27:lcdpcf8574/lcdpcf8574.c **** volatile uint8_t dataport = 0;
  28:lcdpcf8574/lcdpcf8574.c **** 
  29:lcdpcf8574/lcdpcf8574.c **** /* 
  30:lcdpcf8574/lcdpcf8574.c **** ** function prototypes 
  31:lcdpcf8574/lcdpcf8574.c **** */
  32:lcdpcf8574/lcdpcf8574.c **** static void toggle_e(void);
  33:lcdpcf8574/lcdpcf8574.c **** 
  34:lcdpcf8574/lcdpcf8574.c **** /*
  35:lcdpcf8574/lcdpcf8574.c **** ** local functions
  36:lcdpcf8574/lcdpcf8574.c **** */
  37:lcdpcf8574/lcdpcf8574.c **** 
  38:lcdpcf8574/lcdpcf8574.c **** 
  39:lcdpcf8574/lcdpcf8574.c **** 
  40:lcdpcf8574/lcdpcf8574.c **** /*************************************************************************
  41:lcdpcf8574/lcdpcf8574.c ****  delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
  42:lcdpcf8574/lcdpcf8574.c **** *************************************************************************/
  43:lcdpcf8574/lcdpcf8574.c **** static inline void _delayFourCycles(unsigned int __count)
  44:lcdpcf8574/lcdpcf8574.c **** {
  45:lcdpcf8574/lcdpcf8574.c ****     if ( __count == 0 )    
  46:lcdpcf8574/lcdpcf8574.c ****         __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
  47:lcdpcf8574/lcdpcf8574.c ****     else
  48:lcdpcf8574/lcdpcf8574.c ****         __asm__ __volatile__ (
  49:lcdpcf8574/lcdpcf8574.c ****     	    "1: sbiw %0,1" "\n\t"                  
  50:lcdpcf8574/lcdpcf8574.c ****     	    "brne 1b"                              // 4 cycles/loop
  51:lcdpcf8574/lcdpcf8574.c ****     	    : "=w" (__count)
  52:lcdpcf8574/lcdpcf8574.c ****     	    : "0" (__count)
  53:lcdpcf8574/lcdpcf8574.c ****     	   );
  54:lcdpcf8574/lcdpcf8574.c **** }
  55:lcdpcf8574/lcdpcf8574.c **** 
  56:lcdpcf8574/lcdpcf8574.c **** 
  57:lcdpcf8574/lcdpcf8574.c **** /************************************************************************* 
  58:lcdpcf8574/lcdpcf8574.c **** delay for a minimum of <us> microseconds
  59:lcdpcf8574/lcdpcf8574.c **** the number of loops is calculated at compile-time from MCU clock frequency
  60:lcdpcf8574/lcdpcf8574.c **** *************************************************************************/
  61:lcdpcf8574/lcdpcf8574.c **** #define delay(us)  _delayFourCycles( ( ( 1*(F_CPU/4000) )*us)/1000 )
  62:lcdpcf8574/lcdpcf8574.c **** 
  63:lcdpcf8574/lcdpcf8574.c **** 
  64:lcdpcf8574/lcdpcf8574.c **** /* toggle Enable Pin to initiate write */
  65:lcdpcf8574/lcdpcf8574.c **** static void toggle_e(void)
  66:lcdpcf8574/lcdpcf8574.c **** {
  14               		.loc 1 66 0
  15               		.cfi_startproc
  16               	/* prologue: function */
  17               	/* frame size = 0 */
  18               	/* stack size = 0 */
  19               	.L__stack_usage = 0
  67:lcdpcf8574/lcdpcf8574.c **** 	pcf8574_setoutputpinhigh(LCD_PCF8574_DEVICEID, LCD_E_PIN);
  20               		.loc 1 67 0
  21 0000 62E0      		ldi r22,lo8(2)
  22 0002 80E0      		ldi r24,0
  23 0004 0E94 0000 		call pcf8574_setoutputpinhigh
  24               	.LVL0:
  68:lcdpcf8574/lcdpcf8574.c ****     lcd_e_delay();
  25               		.loc 1 68 0
  26               	/* #APP */
  27               	 ;  68 "lcdpcf8574/lcdpcf8574.c" 1
  28 0008 00C0      		rjmp 1f
  29               	 1:
  30               	 ;  0 "" 2
  69:lcdpcf8574/lcdpcf8574.c ****     pcf8574_setoutputpinlow(LCD_PCF8574_DEVICEID, LCD_E_PIN);
  31               		.loc 1 69 0
  32               	/* #NOAPP */
  33 000a 62E0      		ldi r22,lo8(2)
  34 000c 80E0      		ldi r24,0
  35 000e 0C94 0000 		jmp pcf8574_setoutputpinlow
  36               	.LVL1:
  37               		.cfi_endproc
  38               	.LFE2:
  41               	lcd_write:
  42               	.LFB3:
  70:lcdpcf8574/lcdpcf8574.c **** }
  71:lcdpcf8574/lcdpcf8574.c **** 
  72:lcdpcf8574/lcdpcf8574.c **** 
  73:lcdpcf8574/lcdpcf8574.c **** /*************************************************************************
  74:lcdpcf8574/lcdpcf8574.c **** Low-level function to write byte to LCD controller
  75:lcdpcf8574/lcdpcf8574.c **** Input:    data   byte to write to LCD
  76:lcdpcf8574/lcdpcf8574.c ****           rs     1: write data    
  77:lcdpcf8574/lcdpcf8574.c ****                  0: write instruction
  78:lcdpcf8574/lcdpcf8574.c **** Returns:  none
  79:lcdpcf8574/lcdpcf8574.c **** *************************************************************************/
  80:lcdpcf8574/lcdpcf8574.c **** static void lcd_write(uint8_t data,uint8_t rs) 
  81:lcdpcf8574/lcdpcf8574.c **** {
  43               		.loc 1 81 0
  44               		.cfi_startproc
  45               	.LVL2:
  46 0012 CF93      		push r28
  47               	.LCFI0:
  48               		.cfi_def_cfa_offset 3
  49               		.cfi_offset 28, -2
  50               	/* prologue: function */
  51               	/* frame size = 0 */
  52               	/* stack size = 1 */
  53               	.L__stack_usage = 1
  54 0014 C82F      		mov r28,r24
  82:lcdpcf8574/lcdpcf8574.c **** 	if (rs) /* write data        (RS=1, RW=0) */
  83:lcdpcf8574/lcdpcf8574.c **** 		dataport |= _BV(LCD_RS_PIN);
  55               		.loc 1 83 0
  56 0016 8091 0000 		lds r24,dataport
  57               	.LVL3:
  82:lcdpcf8574/lcdpcf8574.c **** 	if (rs) /* write data        (RS=1, RW=0) */
  58               		.loc 1 82 0
  59 001a 6623      		tst r22
  60 001c 01F0      		breq .L3
  61               		.loc 1 83 0
  62 001e 8160      		ori r24,lo8(1)
  63 0020 00C0      		rjmp .L34
  64               	.L3:
  84:lcdpcf8574/lcdpcf8574.c **** 	else /* write instruction (RS=0, RW=0) */
  85:lcdpcf8574/lcdpcf8574.c **** 		dataport &= ~_BV(LCD_RS_PIN);
  65               		.loc 1 85 0
  66 0022 8E7F      		andi r24,lo8(-2)
  67               	.L34:
  68 0024 8093 0000 		sts dataport,r24
  86:lcdpcf8574/lcdpcf8574.c **** 	dataport &= ~_BV(LCD_RW_PIN);
  69               		.loc 1 86 0
  70 0028 8091 0000 		lds r24,dataport
  71 002c 8D7F      		andi r24,lo8(-3)
  72 002e 8093 0000 		sts dataport,r24
  87:lcdpcf8574/lcdpcf8574.c **** 	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
  73               		.loc 1 87 0
  74 0032 6091 0000 		lds r22,dataport
  75               	.LVL4:
  76 0036 80E0      		ldi r24,0
  77 0038 0E94 0000 		call pcf8574_setoutput
  78               	.LVL5:
  88:lcdpcf8574/lcdpcf8574.c **** 
  89:lcdpcf8574/lcdpcf8574.c **** 	/* output high nibble first */
  90:lcdpcf8574/lcdpcf8574.c ****     dataport &= ~_BV(LCD_DATA3_PIN);
  79               		.loc 1 90 0
  80 003c 8091 0000 		lds r24,dataport
  81 0040 8F77      		andi r24,lo8(127)
  82 0042 8093 0000 		sts dataport,r24
  91:lcdpcf8574/lcdpcf8574.c ****     dataport &= ~_BV(LCD_DATA2_PIN);
  83               		.loc 1 91 0
  84 0046 8091 0000 		lds r24,dataport
  85 004a 8F7B      		andi r24,lo8(-65)
  86 004c 8093 0000 		sts dataport,r24
  92:lcdpcf8574/lcdpcf8574.c ****     dataport &= ~_BV(LCD_DATA1_PIN);
  87               		.loc 1 92 0
  88 0050 8091 0000 		lds r24,dataport
  89 0054 8F7D      		andi r24,lo8(-33)
  90 0056 8093 0000 		sts dataport,r24
  93:lcdpcf8574/lcdpcf8574.c ****     dataport &= ~_BV(LCD_DATA0_PIN);
  91               		.loc 1 93 0
  92 005a 8091 0000 		lds r24,dataport
  93 005e 8F7E      		andi r24,lo8(-17)
  94 0060 8093 0000 		sts dataport,r24
  94:lcdpcf8574/lcdpcf8574.c **** 	if(data & 0x80) dataport |= _BV(LCD_DATA3_PIN);
  95               		.loc 1 94 0
  96 0064 C7FF      		sbrs r28,7
  97 0066 00C0      		rjmp .L5
  98               		.loc 1 94 0 is_stmt 0 discriminator 1
  99 0068 8091 0000 		lds r24,dataport
 100 006c 8068      		ori r24,lo8(-128)
 101 006e 8093 0000 		sts dataport,r24
 102               	.L5:
  95:lcdpcf8574/lcdpcf8574.c **** 	if(data & 0x40) dataport |= _BV(LCD_DATA2_PIN);
 103               		.loc 1 95 0 is_stmt 1
 104 0072 C6FF      		sbrs r28,6
 105 0074 00C0      		rjmp .L6
 106               		.loc 1 95 0 is_stmt 0 discriminator 1
 107 0076 8091 0000 		lds r24,dataport
 108 007a 8064      		ori r24,lo8(64)
 109 007c 8093 0000 		sts dataport,r24
 110               	.L6:
  96:lcdpcf8574/lcdpcf8574.c **** 	if(data & 0x20) dataport |= _BV(LCD_DATA1_PIN);
 111               		.loc 1 96 0 is_stmt 1
 112 0080 C5FF      		sbrs r28,5
 113 0082 00C0      		rjmp .L7
 114               		.loc 1 96 0 is_stmt 0 discriminator 1
 115 0084 8091 0000 		lds r24,dataport
 116 0088 8062      		ori r24,lo8(32)
 117 008a 8093 0000 		sts dataport,r24
 118               	.L7:
  97:lcdpcf8574/lcdpcf8574.c **** 	if(data & 0x10) dataport |= _BV(LCD_DATA0_PIN);
 119               		.loc 1 97 0 is_stmt 1
 120 008e C4FF      		sbrs r28,4
 121 0090 00C0      		rjmp .L8
 122               		.loc 1 97 0 is_stmt 0 discriminator 1
 123 0092 8091 0000 		lds r24,dataport
 124 0096 8061      		ori r24,lo8(16)
 125 0098 8093 0000 		sts dataport,r24
 126               	.L8:
  98:lcdpcf8574/lcdpcf8574.c **** 	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 127               		.loc 1 98 0 is_stmt 1
 128 009c 6091 0000 		lds r22,dataport
 129 00a0 80E0      		ldi r24,0
 130 00a2 0E94 0000 		call pcf8574_setoutput
 131               	.LVL6:
  99:lcdpcf8574/lcdpcf8574.c **** 	lcd_e_toggle();
 132               		.loc 1 99 0
 133 00a6 0E94 0000 		call toggle_e
 134               	.LVL7:
 100:lcdpcf8574/lcdpcf8574.c **** 
 101:lcdpcf8574/lcdpcf8574.c **** 	/* output low nibble */
 102:lcdpcf8574/lcdpcf8574.c **** 	dataport &= ~_BV(LCD_DATA3_PIN);
 135               		.loc 1 102 0
 136 00aa 8091 0000 		lds r24,dataport
 137 00ae 8F77      		andi r24,lo8(127)
 138 00b0 8093 0000 		sts dataport,r24
 103:lcdpcf8574/lcdpcf8574.c **** 	dataport &= ~_BV(LCD_DATA2_PIN);
 139               		.loc 1 103 0
 140 00b4 8091 0000 		lds r24,dataport
 141 00b8 8F7B      		andi r24,lo8(-65)
 142 00ba 8093 0000 		sts dataport,r24
 104:lcdpcf8574/lcdpcf8574.c **** 	dataport &= ~_BV(LCD_DATA1_PIN);
 143               		.loc 1 104 0
 144 00be 8091 0000 		lds r24,dataport
 145 00c2 8F7D      		andi r24,lo8(-33)
 146 00c4 8093 0000 		sts dataport,r24
 105:lcdpcf8574/lcdpcf8574.c **** 	dataport &= ~_BV(LCD_DATA0_PIN);
 147               		.loc 1 105 0
 148 00c8 8091 0000 		lds r24,dataport
 149 00cc 8F7E      		andi r24,lo8(-17)
 150 00ce 8093 0000 		sts dataport,r24
 106:lcdpcf8574/lcdpcf8574.c **** 	if(data & 0x08) dataport |= _BV(LCD_DATA3_PIN);
 151               		.loc 1 106 0
 152 00d2 C3FF      		sbrs r28,3
 153 00d4 00C0      		rjmp .L9
 154               		.loc 1 106 0 is_stmt 0 discriminator 1
 155 00d6 8091 0000 		lds r24,dataport
 156 00da 8068      		ori r24,lo8(-128)
 157 00dc 8093 0000 		sts dataport,r24
 158               	.L9:
 107:lcdpcf8574/lcdpcf8574.c **** 	if(data & 0x04) dataport |= _BV(LCD_DATA2_PIN);
 159               		.loc 1 107 0 is_stmt 1
 160 00e0 C2FF      		sbrs r28,2
 161 00e2 00C0      		rjmp .L10
 162               		.loc 1 107 0 is_stmt 0 discriminator 1
 163 00e4 8091 0000 		lds r24,dataport
 164 00e8 8064      		ori r24,lo8(64)
 165 00ea 8093 0000 		sts dataport,r24
 166               	.L10:
 108:lcdpcf8574/lcdpcf8574.c **** 	if(data & 0x02) dataport |= _BV(LCD_DATA1_PIN);
 167               		.loc 1 108 0 is_stmt 1
 168 00ee C1FF      		sbrs r28,1
 169 00f0 00C0      		rjmp .L11
 170               		.loc 1 108 0 is_stmt 0 discriminator 1
 171 00f2 8091 0000 		lds r24,dataport
 172 00f6 8062      		ori r24,lo8(32)
 173 00f8 8093 0000 		sts dataport,r24
 174               	.L11:
 109:lcdpcf8574/lcdpcf8574.c **** 	if(data & 0x01) dataport |= _BV(LCD_DATA0_PIN);
 175               		.loc 1 109 0 is_stmt 1
 176 00fc C0FF      		sbrs r28,0
 177 00fe 00C0      		rjmp .L12
 178               		.loc 1 109 0 is_stmt 0 discriminator 1
 179 0100 8091 0000 		lds r24,dataport
 180 0104 8061      		ori r24,lo8(16)
 181 0106 8093 0000 		sts dataport,r24
 182               	.L12:
 110:lcdpcf8574/lcdpcf8574.c **** 	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 183               		.loc 1 110 0 is_stmt 1
 184 010a 6091 0000 		lds r22,dataport
 185 010e 80E0      		ldi r24,0
 186 0110 0E94 0000 		call pcf8574_setoutput
 187               	.LVL8:
 111:lcdpcf8574/lcdpcf8574.c **** 	lcd_e_toggle();
 188               		.loc 1 111 0
 189 0114 0E94 0000 		call toggle_e
 190               	.LVL9:
 112:lcdpcf8574/lcdpcf8574.c **** 
 113:lcdpcf8574/lcdpcf8574.c **** 	/* all data pins high (inactive) */
 114:lcdpcf8574/lcdpcf8574.c **** 	dataport |= _BV(LCD_DATA0_PIN);
 191               		.loc 1 114 0
 192 0118 8091 0000 		lds r24,dataport
 193 011c 8061      		ori r24,lo8(16)
 194 011e 8093 0000 		sts dataport,r24
 115:lcdpcf8574/lcdpcf8574.c **** 	dataport |= _BV(LCD_DATA1_PIN);
 195               		.loc 1 115 0
 196 0122 8091 0000 		lds r24,dataport
 197 0126 8062      		ori r24,lo8(32)
 198 0128 8093 0000 		sts dataport,r24
 116:lcdpcf8574/lcdpcf8574.c **** 	dataport |= _BV(LCD_DATA2_PIN);
 199               		.loc 1 116 0
 200 012c 8091 0000 		lds r24,dataport
 201 0130 8064      		ori r24,lo8(64)
 202 0132 8093 0000 		sts dataport,r24
 117:lcdpcf8574/lcdpcf8574.c **** 	dataport |= _BV(LCD_DATA3_PIN);
 203               		.loc 1 117 0
 204 0136 8091 0000 		lds r24,dataport
 205 013a 8068      		ori r24,lo8(-128)
 206 013c 8093 0000 		sts dataport,r24
 118:lcdpcf8574/lcdpcf8574.c **** 	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 207               		.loc 1 118 0
 208 0140 6091 0000 		lds r22,dataport
 209 0144 80E0      		ldi r24,0
 210               	/* epilogue start */
 119:lcdpcf8574/lcdpcf8574.c **** }
 211               		.loc 1 119 0
 212 0146 CF91      		pop r28
 213               	.LVL10:
 118:lcdpcf8574/lcdpcf8574.c **** 	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 214               		.loc 1 118 0
 215 0148 0C94 0000 		jmp pcf8574_setoutput
 216               	.LVL11:
 217               		.cfi_endproc
 218               	.LFE3:
 221               	lcd_read.constprop.0:
 222               	.LFB18:
 120:lcdpcf8574/lcdpcf8574.c **** 
 121:lcdpcf8574/lcdpcf8574.c **** 
 122:lcdpcf8574/lcdpcf8574.c **** /*************************************************************************
 123:lcdpcf8574/lcdpcf8574.c **** Low-level function to read byte from LCD controller
 124:lcdpcf8574/lcdpcf8574.c **** Input:    rs     1: read data    
 125:lcdpcf8574/lcdpcf8574.c ****                  0: read busy flag / address counter
 126:lcdpcf8574/lcdpcf8574.c **** Returns:  byte read from LCD controller
 127:lcdpcf8574/lcdpcf8574.c **** *************************************************************************/
 128:lcdpcf8574/lcdpcf8574.c **** static uint8_t lcd_read(uint8_t rs) 
 223               		.loc 1 128 0
 224               		.cfi_startproc
 225 014c CF93      		push r28
 226               	.LCFI1:
 227               		.cfi_def_cfa_offset 3
 228               		.cfi_offset 28, -2
 229               	/* prologue: function */
 230               	/* frame size = 0 */
 231               	/* stack size = 1 */
 232               	.L__stack_usage = 1
 233               	.LVL12:
 129:lcdpcf8574/lcdpcf8574.c **** {
 130:lcdpcf8574/lcdpcf8574.c ****     uint8_t data;
 131:lcdpcf8574/lcdpcf8574.c **** 
 132:lcdpcf8574/lcdpcf8574.c ****     if (rs) /* write data        (RS=1, RW=0) */
 133:lcdpcf8574/lcdpcf8574.c ****     	dataport |= _BV(LCD_RS_PIN);
 134:lcdpcf8574/lcdpcf8574.c ****     else /* write instruction (RS=0, RW=0) */
 135:lcdpcf8574/lcdpcf8574.c ****     	dataport &= ~_BV(LCD_RS_PIN);
 234               		.loc 1 135 0
 235 014e 8091 0000 		lds r24,dataport
 236 0152 8E7F      		andi r24,lo8(-2)
 237 0154 8093 0000 		sts dataport,r24
 136:lcdpcf8574/lcdpcf8574.c ****     dataport |= _BV(LCD_RW_PIN);
 238               		.loc 1 136 0
 239 0158 8091 0000 		lds r24,dataport
 240 015c 8260      		ori r24,lo8(2)
 241 015e 8093 0000 		sts dataport,r24
 137:lcdpcf8574/lcdpcf8574.c ****     pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 242               		.loc 1 137 0
 243 0162 6091 0000 		lds r22,dataport
 244 0166 80E0      		ldi r24,0
 245 0168 0E94 0000 		call pcf8574_setoutput
 246               	.LVL13:
 138:lcdpcf8574/lcdpcf8574.c **** 
 139:lcdpcf8574/lcdpcf8574.c ****     pcf8574_setoutputpinhigh(LCD_PCF8574_DEVICEID, LCD_E_PIN);
 247               		.loc 1 139 0
 248 016c 62E0      		ldi r22,lo8(2)
 249 016e 80E0      		ldi r24,0
 250 0170 0E94 0000 		call pcf8574_setoutputpinhigh
 251               	.LVL14:
 140:lcdpcf8574/lcdpcf8574.c **** 	lcd_e_delay();
 252               		.loc 1 140 0
 253               	/* #APP */
 254               	 ;  140 "lcdpcf8574/lcdpcf8574.c" 1
 255 0174 00C0      		rjmp 1f
 256               	 1:
 257               	 ;  0 "" 2
 141:lcdpcf8574/lcdpcf8574.c **** 	data = pcf8574_getoutputpin(LCD_PCF8574_DEVICEID, LCD_DATA0_PIN) << 4;     /* read high nibble fir
 258               		.loc 1 141 0
 259               	/* #NOAPP */
 260 0176 64E0      		ldi r22,lo8(4)
 261 0178 80E0      		ldi r24,0
 262 017a 0E94 0000 		call pcf8574_getoutputpin
 263               	.LVL15:
 264 017e C82F      		mov r28,r24
 265               	.LVL16:
 142:lcdpcf8574/lcdpcf8574.c **** 	pcf8574_setoutputpinlow(LCD_PCF8574_DEVICEID, LCD_E_PIN);
 266               		.loc 1 142 0
 267 0180 62E0      		ldi r22,lo8(2)
 268 0182 80E0      		ldi r24,0
 269               	.LVL17:
 270 0184 0E94 0000 		call pcf8574_setoutputpinlow
 271               	.LVL18:
 143:lcdpcf8574/lcdpcf8574.c **** 
 144:lcdpcf8574/lcdpcf8574.c **** 	lcd_e_delay();                       /* Enable 500ns low       */
 272               		.loc 1 144 0
 273               	/* #APP */
 274               	 ;  144 "lcdpcf8574/lcdpcf8574.c" 1
 275 0188 00C0      		rjmp 1f
 276               	 1:
 277               	 ;  0 "" 2
 145:lcdpcf8574/lcdpcf8574.c **** 
 146:lcdpcf8574/lcdpcf8574.c **** 	pcf8574_setoutputpinhigh(LCD_PCF8574_DEVICEID, LCD_E_PIN);
 278               		.loc 1 146 0
 279               	/* #NOAPP */
 280 018a 62E0      		ldi r22,lo8(2)
 281 018c 80E0      		ldi r24,0
 282 018e 0E94 0000 		call pcf8574_setoutputpinhigh
 283               	.LVL19:
 147:lcdpcf8574/lcdpcf8574.c **** 	lcd_e_delay();
 284               		.loc 1 147 0
 285               	/* #APP */
 286               	 ;  147 "lcdpcf8574/lcdpcf8574.c" 1
 287 0192 00C0      		rjmp 1f
 288               	 1:
 289               	 ;  0 "" 2
 148:lcdpcf8574/lcdpcf8574.c **** 	data |= pcf8574_getoutputpin(LCD_PCF8574_DEVICEID, LCD_DATA0_PIN) &0x0F;    /* read low nibble    
 290               		.loc 1 148 0
 291               	/* #NOAPP */
 292 0194 64E0      		ldi r22,lo8(4)
 293 0196 80E0      		ldi r24,0
 294 0198 0E94 0000 		call pcf8574_getoutputpin
 295               	.LVL20:
 141:lcdpcf8574/lcdpcf8574.c **** 	pcf8574_setoutputpinlow(LCD_PCF8574_DEVICEID, LCD_E_PIN);
 296               		.loc 1 141 0
 297 019c C295      		swap r28
 298               	.LVL21:
 299 019e C07F      		andi r28,lo8(-16)
 300               		.loc 1 148 0
 301 01a0 8F70      		andi r24,lo8(15)
 302 01a2 C82B      		or r28,r24
 303               	.LVL22:
 149:lcdpcf8574/lcdpcf8574.c **** 	pcf8574_setoutputpinlow(LCD_PCF8574_DEVICEID, LCD_E_PIN);
 304               		.loc 1 149 0
 305 01a4 62E0      		ldi r22,lo8(2)
 306 01a6 80E0      		ldi r24,0
 307 01a8 0E94 0000 		call pcf8574_setoutputpinlow
 308               	.LVL23:
 150:lcdpcf8574/lcdpcf8574.c **** 
 151:lcdpcf8574/lcdpcf8574.c ****     return data;
 152:lcdpcf8574/lcdpcf8574.c **** }
 309               		.loc 1 152 0
 310 01ac 8C2F      		mov r24,r28
 311               	/* epilogue start */
 312 01ae CF91      		pop r28
 313               	.LVL24:
 314 01b0 0895      		ret
 315               		.cfi_endproc
 316               	.LFE18:
 319               	lcd_waitbusy:
 320               	.LFB5:
 153:lcdpcf8574/lcdpcf8574.c **** 
 154:lcdpcf8574/lcdpcf8574.c **** 
 155:lcdpcf8574/lcdpcf8574.c **** /*************************************************************************
 156:lcdpcf8574/lcdpcf8574.c **** loops while lcd is busy, returns address counter
 157:lcdpcf8574/lcdpcf8574.c **** *************************************************************************/
 158:lcdpcf8574/lcdpcf8574.c **** static uint8_t lcd_waitbusy(void)
 159:lcdpcf8574/lcdpcf8574.c **** 
 160:lcdpcf8574/lcdpcf8574.c **** {
 321               		.loc 1 160 0
 322               		.cfi_startproc
 323               	/* prologue: function */
 324               	/* frame size = 0 */
 325               	/* stack size = 0 */
 326               	.L__stack_usage = 0
 327               	.L38:
 161:lcdpcf8574/lcdpcf8574.c ****     register uint8_t c;
 162:lcdpcf8574/lcdpcf8574.c ****     
 163:lcdpcf8574/lcdpcf8574.c ****     /* wait until busy flag is cleared */
 164:lcdpcf8574/lcdpcf8574.c ****     while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 328               		.loc 1 164 0 discriminator 1
 329 01b2 0E94 0000 		call lcd_read.constprop.0
 330               	.LVL25:
 331 01b6 87FD      		sbrc r24,7
 332 01b8 00C0      		rjmp .L38
 333               	.LVL26:
 334               	.LBB4:
 335               	.LBB5:
  48:lcdpcf8574/lcdpcf8574.c ****     	    "1: sbiw %0,1" "\n\t"                  
 336               		.loc 1 48 0
 337 01ba 88E0      		ldi r24,lo8(8)
 338 01bc 90E0      		ldi r25,0
 339               	.LVL27:
 340               	/* #APP */
 341               	 ;  48 "lcdpcf8574/lcdpcf8574.c" 1
 342 01be 0197      		1: sbiw r24,1
 343 01c0 01F4      		brne 1b
 344               	 ;  0 "" 2
 345               	.LVL28:
 346               	/* #NOAPP */
 347               	.LBE5:
 348               	.LBE4:
 165:lcdpcf8574/lcdpcf8574.c ****     
 166:lcdpcf8574/lcdpcf8574.c ****     /* the address counter is updated 4us after the busy flag is cleared */
 167:lcdpcf8574/lcdpcf8574.c ****     delay(2);
 168:lcdpcf8574/lcdpcf8574.c **** 
 169:lcdpcf8574/lcdpcf8574.c ****     /* now read the address counter */
 170:lcdpcf8574/lcdpcf8574.c ****     return (lcd_read(0));  // return address counter
 349               		.loc 1 170 0
 350 01c2 0C94 0000 		jmp lcd_read.constprop.0
 351               	.LVL29:
 352               		.cfi_endproc
 353               	.LFE5:
 355               	.global	lcd_command
 357               	lcd_command:
 358               	.LFB7:
 171:lcdpcf8574/lcdpcf8574.c ****     
 172:lcdpcf8574/lcdpcf8574.c **** }/* lcd_waitbusy */
 173:lcdpcf8574/lcdpcf8574.c **** 
 174:lcdpcf8574/lcdpcf8574.c **** 
 175:lcdpcf8574/lcdpcf8574.c **** /*************************************************************************
 176:lcdpcf8574/lcdpcf8574.c **** Move cursor to the start of next line or to the first line if the cursor 
 177:lcdpcf8574/lcdpcf8574.c **** is already on the last line.
 178:lcdpcf8574/lcdpcf8574.c **** *************************************************************************/
 179:lcdpcf8574/lcdpcf8574.c **** static inline void lcd_newline(uint8_t pos)
 180:lcdpcf8574/lcdpcf8574.c **** {
 181:lcdpcf8574/lcdpcf8574.c ****     register uint8_t addressCounter;
 182:lcdpcf8574/lcdpcf8574.c **** 
 183:lcdpcf8574/lcdpcf8574.c **** 
 184:lcdpcf8574/lcdpcf8574.c **** #if LCD_LINES==1
 185:lcdpcf8574/lcdpcf8574.c ****     addressCounter = 0;
 186:lcdpcf8574/lcdpcf8574.c **** #endif
 187:lcdpcf8574/lcdpcf8574.c **** #if LCD_LINES==2
 188:lcdpcf8574/lcdpcf8574.c ****     if ( pos < (LCD_START_LINE2) )
 189:lcdpcf8574/lcdpcf8574.c ****         addressCounter = LCD_START_LINE2;
 190:lcdpcf8574/lcdpcf8574.c ****     else
 191:lcdpcf8574/lcdpcf8574.c ****         addressCounter = LCD_START_LINE1;
 192:lcdpcf8574/lcdpcf8574.c **** #endif
 193:lcdpcf8574/lcdpcf8574.c **** #if LCD_LINES==4
 194:lcdpcf8574/lcdpcf8574.c ****     if ( pos < LCD_START_LINE3 )
 195:lcdpcf8574/lcdpcf8574.c ****         addressCounter = LCD_START_LINE2;
 196:lcdpcf8574/lcdpcf8574.c ****     else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
 197:lcdpcf8574/lcdpcf8574.c ****         addressCounter = LCD_START_LINE3;
 198:lcdpcf8574/lcdpcf8574.c ****     else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
 199:lcdpcf8574/lcdpcf8574.c ****         addressCounter = LCD_START_LINE4;
 200:lcdpcf8574/lcdpcf8574.c ****     else 
 201:lcdpcf8574/lcdpcf8574.c ****         addressCounter = LCD_START_LINE1;
 202:lcdpcf8574/lcdpcf8574.c **** #endif
 203:lcdpcf8574/lcdpcf8574.c ****     lcd_command((1<<LCD_DDRAM)+addressCounter);
 204:lcdpcf8574/lcdpcf8574.c **** 
 205:lcdpcf8574/lcdpcf8574.c **** }/* lcd_newline */
 206:lcdpcf8574/lcdpcf8574.c **** 
 207:lcdpcf8574/lcdpcf8574.c **** 
 208:lcdpcf8574/lcdpcf8574.c **** /*
 209:lcdpcf8574/lcdpcf8574.c **** ** PUBLIC FUNCTIONS 
 210:lcdpcf8574/lcdpcf8574.c **** */
 211:lcdpcf8574/lcdpcf8574.c **** 
 212:lcdpcf8574/lcdpcf8574.c **** /*************************************************************************
 213:lcdpcf8574/lcdpcf8574.c **** Send LCD controller instruction command
 214:lcdpcf8574/lcdpcf8574.c **** Input:   instruction to send to LCD controller, see HD44780 data sheet
 215:lcdpcf8574/lcdpcf8574.c **** Returns: none
 216:lcdpcf8574/lcdpcf8574.c **** *************************************************************************/
 217:lcdpcf8574/lcdpcf8574.c **** void lcd_command(uint8_t cmd)
 218:lcdpcf8574/lcdpcf8574.c **** {
 359               		.loc 1 218 0
 360               		.cfi_startproc
 361               	.LVL30:
 362 01c6 CF93      		push r28
 363               	.LCFI2:
 364               		.cfi_def_cfa_offset 3
 365               		.cfi_offset 28, -2
 366               	/* prologue: function */
 367               	/* frame size = 0 */
 368               	/* stack size = 1 */
 369               	.L__stack_usage = 1
 370 01c8 C82F      		mov r28,r24
 219:lcdpcf8574/lcdpcf8574.c ****     lcd_waitbusy();
 371               		.loc 1 219 0
 372 01ca 0E94 0000 		call lcd_waitbusy
 373               	.LVL31:
 220:lcdpcf8574/lcdpcf8574.c ****     lcd_write(cmd,0);
 374               		.loc 1 220 0
 375 01ce 60E0      		ldi r22,0
 376 01d0 8C2F      		mov r24,r28
 377               	/* epilogue start */
 221:lcdpcf8574/lcdpcf8574.c **** }
 378               		.loc 1 221 0
 379 01d2 CF91      		pop r28
 380               	.LVL32:
 220:lcdpcf8574/lcdpcf8574.c ****     lcd_write(cmd,0);
 381               		.loc 1 220 0
 382 01d4 0C94 0000 		jmp lcd_write
 383               	.LVL33:
 384               		.cfi_endproc
 385               	.LFE7:
 387               	.global	lcd_data
 389               	lcd_data:
 390               	.LFB8:
 222:lcdpcf8574/lcdpcf8574.c **** 
 223:lcdpcf8574/lcdpcf8574.c **** 
 224:lcdpcf8574/lcdpcf8574.c **** /*************************************************************************
 225:lcdpcf8574/lcdpcf8574.c **** Send data byte to LCD controller 
 226:lcdpcf8574/lcdpcf8574.c **** Input:   data to send to LCD controller, see HD44780 data sheet
 227:lcdpcf8574/lcdpcf8574.c **** Returns: none
 228:lcdpcf8574/lcdpcf8574.c **** *************************************************************************/
 229:lcdpcf8574/lcdpcf8574.c **** void lcd_data(uint8_t data)
 230:lcdpcf8574/lcdpcf8574.c **** {
 391               		.loc 1 230 0
 392               		.cfi_startproc
 393               	.LVL34:
 394 01d8 CF93      		push r28
 395               	.LCFI3:
 396               		.cfi_def_cfa_offset 3
 397               		.cfi_offset 28, -2
 398               	/* prologue: function */
 399               	/* frame size = 0 */
 400               	/* stack size = 1 */
 401               	.L__stack_usage = 1
 402 01da C82F      		mov r28,r24
 231:lcdpcf8574/lcdpcf8574.c ****     lcd_waitbusy();
 403               		.loc 1 231 0
 404 01dc 0E94 0000 		call lcd_waitbusy
 405               	.LVL35:
 232:lcdpcf8574/lcdpcf8574.c ****     lcd_write(data,1);
 406               		.loc 1 232 0
 407 01e0 61E0      		ldi r22,lo8(1)
 408 01e2 8C2F      		mov r24,r28
 409               	/* epilogue start */
 233:lcdpcf8574/lcdpcf8574.c **** }
 410               		.loc 1 233 0
 411 01e4 CF91      		pop r28
 412               	.LVL36:
 232:lcdpcf8574/lcdpcf8574.c ****     lcd_write(data,1);
 413               		.loc 1 232 0
 414 01e6 0C94 0000 		jmp lcd_write
 415               	.LVL37:
 416               		.cfi_endproc
 417               	.LFE8:
 419               	.global	lcd_gotoxy
 421               	lcd_gotoxy:
 422               	.LFB9:
 234:lcdpcf8574/lcdpcf8574.c **** 
 235:lcdpcf8574/lcdpcf8574.c **** 
 236:lcdpcf8574/lcdpcf8574.c **** 
 237:lcdpcf8574/lcdpcf8574.c **** /*************************************************************************
 238:lcdpcf8574/lcdpcf8574.c **** Set cursor to specified position
 239:lcdpcf8574/lcdpcf8574.c **** Input:    x  horizontal position  (0: left most position)
 240:lcdpcf8574/lcdpcf8574.c ****           y  vertical position    (0: first line)
 241:lcdpcf8574/lcdpcf8574.c **** Returns:  none
 242:lcdpcf8574/lcdpcf8574.c **** *************************************************************************/
 243:lcdpcf8574/lcdpcf8574.c **** void lcd_gotoxy(uint8_t x, uint8_t y)
 244:lcdpcf8574/lcdpcf8574.c **** {
 423               		.loc 1 244 0
 424               		.cfi_startproc
 425               	.LVL38:
 426               	/* prologue: function */
 427               	/* frame size = 0 */
 428               	/* stack size = 0 */
 429               	.L__stack_usage = 0
 245:lcdpcf8574/lcdpcf8574.c **** #if LCD_LINES==1
 246:lcdpcf8574/lcdpcf8574.c ****     lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 247:lcdpcf8574/lcdpcf8574.c **** #endif
 248:lcdpcf8574/lcdpcf8574.c **** #if LCD_LINES==2
 249:lcdpcf8574/lcdpcf8574.c ****     if ( y==0 ) 
 430               		.loc 1 249 0
 431 01ea 6111      		cpse r22,__zero_reg__
 432 01ec 00C0      		rjmp .L43
 250:lcdpcf8574/lcdpcf8574.c ****         lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 433               		.loc 1 250 0
 434 01ee 8058      		subi r24,lo8(-(-128))
 435               	.LVL39:
 436 01f0 00C0      		rjmp .L44
 437               	.LVL40:
 438               	.L43:
 251:lcdpcf8574/lcdpcf8574.c ****     else
 252:lcdpcf8574/lcdpcf8574.c ****         lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 439               		.loc 1 252 0
 440 01f2 8054      		subi r24,lo8(-(-64))
 441               	.LVL41:
 442               	.L44:
 443 01f4 0C94 0000 		jmp lcd_command
 444               	.LVL42:
 445               		.cfi_endproc
 446               	.LFE9:
 448               	.global	lcd_getxy
 450               	lcd_getxy:
 451               	.LFB10:
 253:lcdpcf8574/lcdpcf8574.c **** #endif
 254:lcdpcf8574/lcdpcf8574.c **** #if LCD_LINES==4
 255:lcdpcf8574/lcdpcf8574.c ****     if ( y==0 )
 256:lcdpcf8574/lcdpcf8574.c ****         lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 257:lcdpcf8574/lcdpcf8574.c ****     else if ( y==1)
 258:lcdpcf8574/lcdpcf8574.c ****         lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 259:lcdpcf8574/lcdpcf8574.c ****     else if ( y==2)
 260:lcdpcf8574/lcdpcf8574.c ****         lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
 261:lcdpcf8574/lcdpcf8574.c ****     else /* y==3 */
 262:lcdpcf8574/lcdpcf8574.c ****         lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
 263:lcdpcf8574/lcdpcf8574.c **** #endif
 264:lcdpcf8574/lcdpcf8574.c **** 
 265:lcdpcf8574/lcdpcf8574.c **** }/* lcd_gotoxy */
 266:lcdpcf8574/lcdpcf8574.c **** 
 267:lcdpcf8574/lcdpcf8574.c **** 
 268:lcdpcf8574/lcdpcf8574.c **** /*************************************************************************
 269:lcdpcf8574/lcdpcf8574.c **** *************************************************************************/
 270:lcdpcf8574/lcdpcf8574.c **** int lcd_getxy(void)
 271:lcdpcf8574/lcdpcf8574.c **** {
 452               		.loc 1 271 0
 453               		.cfi_startproc
 454               	/* prologue: function */
 455               	/* frame size = 0 */
 456               	/* stack size = 0 */
 457               	.L__stack_usage = 0
 272:lcdpcf8574/lcdpcf8574.c ****     return lcd_waitbusy();
 458               		.loc 1 272 0
 459 01f8 0E94 0000 		call lcd_waitbusy
 460               	.LVL43:
 273:lcdpcf8574/lcdpcf8574.c **** }
 461               		.loc 1 273 0
 462 01fc 90E0      		ldi r25,0
 463 01fe 0895      		ret
 464               		.cfi_endproc
 465               	.LFE10:
 467               	.global	lcd_clrscr
 469               	lcd_clrscr:
 470               	.LFB11:
 274:lcdpcf8574/lcdpcf8574.c **** 
 275:lcdpcf8574/lcdpcf8574.c **** 
 276:lcdpcf8574/lcdpcf8574.c **** /*************************************************************************
 277:lcdpcf8574/lcdpcf8574.c **** Clear display and set cursor to home position
 278:lcdpcf8574/lcdpcf8574.c **** *************************************************************************/
 279:lcdpcf8574/lcdpcf8574.c **** void lcd_clrscr(void)
 280:lcdpcf8574/lcdpcf8574.c **** {
 471               		.loc 1 280 0
 472               		.cfi_startproc
 473               	/* prologue: function */
 474               	/* frame size = 0 */
 475               	/* stack size = 0 */
 476               	.L__stack_usage = 0
 281:lcdpcf8574/lcdpcf8574.c ****     lcd_command(1<<LCD_CLR);
 477               		.loc 1 281 0
 478 0200 81E0      		ldi r24,lo8(1)
 479 0202 0C94 0000 		jmp lcd_command
 480               	.LVL44:
 481               		.cfi_endproc
 482               	.LFE11:
 484               	.global	lcd_led
 486               	lcd_led:
 487               	.LFB12:
 282:lcdpcf8574/lcdpcf8574.c **** }
 283:lcdpcf8574/lcdpcf8574.c **** 
 284:lcdpcf8574/lcdpcf8574.c **** 
 285:lcdpcf8574/lcdpcf8574.c **** /*************************************************************************
 286:lcdpcf8574/lcdpcf8574.c **** Set illumination pin
 287:lcdpcf8574/lcdpcf8574.c **** *************************************************************************/
 288:lcdpcf8574/lcdpcf8574.c **** void lcd_led(uint8_t onoff)
 289:lcdpcf8574/lcdpcf8574.c **** {
 488               		.loc 1 289 0
 489               		.cfi_startproc
 490               	.LVL45:
 491               	/* prologue: function */
 492               	/* frame size = 0 */
 493               	/* stack size = 0 */
 494               	.L__stack_usage = 0
 290:lcdpcf8574/lcdpcf8574.c **** 	if(onoff)
 495               		.loc 1 290 0
 496 0206 8823      		tst r24
 497 0208 01F0      		breq .L48
 291:lcdpcf8574/lcdpcf8574.c **** 		dataport &= ~_BV(LCD_LED_PIN);
 498               		.loc 1 291 0
 499 020a 8091 0000 		lds r24,dataport
 500               	.LVL46:
 501 020e 877F      		andi r24,lo8(-9)
 502 0210 00C0      		rjmp .L50
 503               	.LVL47:
 504               	.L48:
 292:lcdpcf8574/lcdpcf8574.c **** 	else
 293:lcdpcf8574/lcdpcf8574.c **** 		dataport |= _BV(LCD_LED_PIN);
 505               		.loc 1 293 0
 506 0212 8091 0000 		lds r24,dataport
 507               	.LVL48:
 508 0216 8860      		ori r24,lo8(8)
 509               	.L50:
 510 0218 8093 0000 		sts dataport,r24
 294:lcdpcf8574/lcdpcf8574.c **** 	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 511               		.loc 1 294 0
 512 021c 6091 0000 		lds r22,dataport
 513 0220 80E0      		ldi r24,0
 514 0222 0C94 0000 		jmp pcf8574_setoutput
 515               	.LVL49:
 516               		.cfi_endproc
 517               	.LFE12:
 519               	.global	lcd_home
 521               	lcd_home:
 522               	.LFB13:
 295:lcdpcf8574/lcdpcf8574.c **** }
 296:lcdpcf8574/lcdpcf8574.c **** 
 297:lcdpcf8574/lcdpcf8574.c **** 
 298:lcdpcf8574/lcdpcf8574.c **** /*************************************************************************
 299:lcdpcf8574/lcdpcf8574.c **** Set cursor to home position
 300:lcdpcf8574/lcdpcf8574.c **** *************************************************************************/
 301:lcdpcf8574/lcdpcf8574.c **** void lcd_home(void)
 302:lcdpcf8574/lcdpcf8574.c **** {
 523               		.loc 1 302 0
 524               		.cfi_startproc
 525               	/* prologue: function */
 526               	/* frame size = 0 */
 527               	/* stack size = 0 */
 528               	.L__stack_usage = 0
 303:lcdpcf8574/lcdpcf8574.c ****     lcd_command(1<<LCD_HOME);
 529               		.loc 1 303 0
 530 0226 82E0      		ldi r24,lo8(2)
 531 0228 0C94 0000 		jmp lcd_command
 532               	.LVL50:
 533               		.cfi_endproc
 534               	.LFE13:
 536               	.global	lcd_putc
 538               	lcd_putc:
 539               	.LFB14:
 304:lcdpcf8574/lcdpcf8574.c **** }
 305:lcdpcf8574/lcdpcf8574.c **** 
 306:lcdpcf8574/lcdpcf8574.c **** 
 307:lcdpcf8574/lcdpcf8574.c **** /*************************************************************************
 308:lcdpcf8574/lcdpcf8574.c **** Display character at current cursor position 
 309:lcdpcf8574/lcdpcf8574.c **** Input:    character to be displayed                                       
 310:lcdpcf8574/lcdpcf8574.c **** Returns:  none
 311:lcdpcf8574/lcdpcf8574.c **** *************************************************************************/
 312:lcdpcf8574/lcdpcf8574.c **** void lcd_putc(char c)
 313:lcdpcf8574/lcdpcf8574.c **** {
 540               		.loc 1 313 0
 541               		.cfi_startproc
 542               	.LVL51:
 543 022c CF93      		push r28
 544               	.LCFI4:
 545               		.cfi_def_cfa_offset 3
 546               		.cfi_offset 28, -2
 547               	/* prologue: function */
 548               	/* frame size = 0 */
 549               	/* stack size = 1 */
 550               	.L__stack_usage = 1
 551 022e C82F      		mov r28,r24
 314:lcdpcf8574/lcdpcf8574.c ****     uint8_t pos;
 315:lcdpcf8574/lcdpcf8574.c **** 
 316:lcdpcf8574/lcdpcf8574.c ****     pos = lcd_waitbusy();   // read busy-flag and address counter
 552               		.loc 1 316 0
 553 0230 0E94 0000 		call lcd_waitbusy
 554               	.LVL52:
 317:lcdpcf8574/lcdpcf8574.c ****     if (c=='\n')
 555               		.loc 1 317 0
 556 0234 CA30      		cpi r28,lo8(10)
 557 0236 01F4      		brne .L53
 558               	.LVL53:
 559               	.LBB8:
 560               	.LBB9:
 188:lcdpcf8574/lcdpcf8574.c ****         addressCounter = LCD_START_LINE2;
 561               		.loc 1 188 0
 562 0238 8034      		cpi r24,lo8(64)
 563 023a 00F0      		brlo .L55
 191:lcdpcf8574/lcdpcf8574.c **** #endif
 564               		.loc 1 191 0
 565 023c 80E0      		ldi r24,0
 566               	.LVL54:
 567 023e 00C0      		rjmp .L54
 568               	.LVL55:
 569               	.L55:
 189:lcdpcf8574/lcdpcf8574.c ****     else
 570               		.loc 1 189 0
 571 0240 80E4      		ldi r24,lo8(64)
 572               	.LVL56:
 573               	.L54:
 203:lcdpcf8574/lcdpcf8574.c **** 
 574               		.loc 1 203 0
 575 0242 8058      		subi r24,lo8(-(-128))
 576               	.LVL57:
 577               	/* epilogue start */
 578               	.LBE9:
 579               	.LBE8:
 318:lcdpcf8574/lcdpcf8574.c ****     {
 319:lcdpcf8574/lcdpcf8574.c ****         lcd_newline(pos);
 320:lcdpcf8574/lcdpcf8574.c ****     }
 321:lcdpcf8574/lcdpcf8574.c ****     else
 322:lcdpcf8574/lcdpcf8574.c ****     {
 323:lcdpcf8574/lcdpcf8574.c **** #if LCD_WRAP_LINES==1
 324:lcdpcf8574/lcdpcf8574.c **** #if LCD_LINES==1
 325:lcdpcf8574/lcdpcf8574.c ****         if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
 326:lcdpcf8574/lcdpcf8574.c ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
 327:lcdpcf8574/lcdpcf8574.c ****         }
 328:lcdpcf8574/lcdpcf8574.c **** #elif LCD_LINES==2
 329:lcdpcf8574/lcdpcf8574.c ****         if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
 330:lcdpcf8574/lcdpcf8574.c ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
 331:lcdpcf8574/lcdpcf8574.c ****         }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ){
 332:lcdpcf8574/lcdpcf8574.c ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
 333:lcdpcf8574/lcdpcf8574.c ****         }
 334:lcdpcf8574/lcdpcf8574.c **** #elif LCD_LINES==4
 335:lcdpcf8574/lcdpcf8574.c ****         if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
 336:lcdpcf8574/lcdpcf8574.c ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
 337:lcdpcf8574/lcdpcf8574.c ****         }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ) {
 338:lcdpcf8574/lcdpcf8574.c ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE3,0);
 339:lcdpcf8574/lcdpcf8574.c ****         }else if ( pos == LCD_START_LINE3+LCD_DISP_LENGTH ) {
 340:lcdpcf8574/lcdpcf8574.c ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE4,0);
 341:lcdpcf8574/lcdpcf8574.c ****         }else if ( pos == LCD_START_LINE4+LCD_DISP_LENGTH ) {
 342:lcdpcf8574/lcdpcf8574.c ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
 343:lcdpcf8574/lcdpcf8574.c ****         }
 344:lcdpcf8574/lcdpcf8574.c **** #endif
 345:lcdpcf8574/lcdpcf8574.c ****         lcd_waitbusy();
 346:lcdpcf8574/lcdpcf8574.c **** #endif
 347:lcdpcf8574/lcdpcf8574.c ****         lcd_write(c, 1);
 348:lcdpcf8574/lcdpcf8574.c ****     }
 349:lcdpcf8574/lcdpcf8574.c **** 
 350:lcdpcf8574/lcdpcf8574.c **** }/* lcd_putc */
 580               		.loc 1 350 0
 581 0244 CF91      		pop r28
 582               	.LVL58:
 583               	.LBB11:
 584               	.LBB10:
 203:lcdpcf8574/lcdpcf8574.c **** 
 585               		.loc 1 203 0
 586 0246 0C94 0000 		jmp lcd_command
 587               	.LVL59:
 588               	.L53:
 589               	.LBE10:
 590               	.LBE11:
 347:lcdpcf8574/lcdpcf8574.c ****     }
 591               		.loc 1 347 0
 592 024a 61E0      		ldi r22,lo8(1)
 593 024c 8C2F      		mov r24,r28
 594               	.LVL60:
 595               	/* epilogue start */
 596               		.loc 1 350 0
 597 024e CF91      		pop r28
 598               	.LVL61:
 347:lcdpcf8574/lcdpcf8574.c ****     }
 599               		.loc 1 347 0
 600 0250 0C94 0000 		jmp lcd_write
 601               	.LVL62:
 602               		.cfi_endproc
 603               	.LFE14:
 605               	.global	lcd_puts
 607               	lcd_puts:
 608               	.LFB15:
 351:lcdpcf8574/lcdpcf8574.c **** 
 352:lcdpcf8574/lcdpcf8574.c **** 
 353:lcdpcf8574/lcdpcf8574.c **** /*************************************************************************
 354:lcdpcf8574/lcdpcf8574.c **** Display string without auto linefeed 
 355:lcdpcf8574/lcdpcf8574.c **** Input:    string to be displayed
 356:lcdpcf8574/lcdpcf8574.c **** Returns:  none
 357:lcdpcf8574/lcdpcf8574.c **** *************************************************************************/
 358:lcdpcf8574/lcdpcf8574.c **** void lcd_puts(const char *s)
 359:lcdpcf8574/lcdpcf8574.c **** /* print string on lcd (no auto linefeed) */
 360:lcdpcf8574/lcdpcf8574.c **** {
 609               		.loc 1 360 0
 610               		.cfi_startproc
 611               	.LVL63:
 612 0254 CF93      		push r28
 613               	.LCFI5:
 614               		.cfi_def_cfa_offset 3
 615               		.cfi_offset 28, -2
 616 0256 DF93      		push r29
 617               	.LCFI6:
 618               		.cfi_def_cfa_offset 4
 619               		.cfi_offset 29, -3
 620               	/* prologue: function */
 621               	/* frame size = 0 */
 622               	/* stack size = 2 */
 623               	.L__stack_usage = 2
 624 0258 EC01      		movw r28,r24
 625               	.LVL64:
 626               	.L57:
 361:lcdpcf8574/lcdpcf8574.c ****     register char c;
 362:lcdpcf8574/lcdpcf8574.c **** 
 363:lcdpcf8574/lcdpcf8574.c ****     while ( (c = *s++) ) {
 627               		.loc 1 363 0
 628 025a 8991      		ld r24,Y+
 629               	.LVL65:
 630 025c 8823      		tst r24
 631 025e 01F0      		breq .L59
 364:lcdpcf8574/lcdpcf8574.c ****         lcd_putc(c);
 632               		.loc 1 364 0
 633 0260 0E94 0000 		call lcd_putc
 634               	.LVL66:
 635 0264 00C0      		rjmp .L57
 636               	.LVL67:
 637               	.L59:
 638               	/* epilogue start */
 365:lcdpcf8574/lcdpcf8574.c ****     }
 366:lcdpcf8574/lcdpcf8574.c **** 
 367:lcdpcf8574/lcdpcf8574.c **** }/* lcd_puts */
 639               		.loc 1 367 0
 640 0266 DF91      		pop r29
 641 0268 CF91      		pop r28
 642               	.LVL68:
 643 026a 0895      		ret
 644               		.cfi_endproc
 645               	.LFE15:
 647               	.global	lcd_puts_p
 649               	lcd_puts_p:
 650               	.LFB16:
 368:lcdpcf8574/lcdpcf8574.c **** 
 369:lcdpcf8574/lcdpcf8574.c **** 
 370:lcdpcf8574/lcdpcf8574.c **** /*************************************************************************
 371:lcdpcf8574/lcdpcf8574.c **** Display string from program memory without auto linefeed 
 372:lcdpcf8574/lcdpcf8574.c **** Input:     string from program memory be be displayed                                        
 373:lcdpcf8574/lcdpcf8574.c **** Returns:   none
 374:lcdpcf8574/lcdpcf8574.c **** *************************************************************************/
 375:lcdpcf8574/lcdpcf8574.c **** void lcd_puts_p(const char *progmem_s)
 376:lcdpcf8574/lcdpcf8574.c **** /* print string from program memory on lcd (no auto linefeed) */
 377:lcdpcf8574/lcdpcf8574.c **** {
 651               		.loc 1 377 0
 652               		.cfi_startproc
 653               	.LVL69:
 654 026c CF93      		push r28
 655               	.LCFI7:
 656               		.cfi_def_cfa_offset 3
 657               		.cfi_offset 28, -2
 658 026e DF93      		push r29
 659               	.LCFI8:
 660               		.cfi_def_cfa_offset 4
 661               		.cfi_offset 29, -3
 662               	/* prologue: function */
 663               	/* frame size = 0 */
 664               	/* stack size = 2 */
 665               	.L__stack_usage = 2
 666 0270 FC01      		movw r30,r24
 667               	.LVL70:
 668               	.L61:
 669               	.LBB12:
 378:lcdpcf8574/lcdpcf8574.c ****     register char c;
 379:lcdpcf8574/lcdpcf8574.c **** 
 380:lcdpcf8574/lcdpcf8574.c ****     while ( (c = pgm_read_byte(progmem_s++)) ) {
 670               		.loc 1 380 0
 671               	/* #APP */
 672               	 ;  380 "lcdpcf8574/lcdpcf8574.c" 1
 673 0272 8491      		lpm r24, Z
 674               		
 675               	 ;  0 "" 2
 676               	.LVL71:
 677               	/* #NOAPP */
 678 0274 EF01      		movw r28,r30
 679 0276 2196      		adiw r28,1
 680               	.LVL72:
 681               	.LBE12:
 682 0278 8823      		tst r24
 683 027a 01F0      		breq .L63
 381:lcdpcf8574/lcdpcf8574.c ****         lcd_putc(c);
 684               		.loc 1 381 0
 685 027c 0E94 0000 		call lcd_putc
 686               	.LVL73:
 687 0280 FE01      		movw r30,r28
 688 0282 00C0      		rjmp .L61
 689               	.LVL74:
 690               	.L63:
 691               	/* epilogue start */
 382:lcdpcf8574/lcdpcf8574.c ****     }
 383:lcdpcf8574/lcdpcf8574.c **** 
 384:lcdpcf8574/lcdpcf8574.c **** }/* lcd_puts_p */
 692               		.loc 1 384 0
 693 0284 DF91      		pop r29
 694 0286 CF91      		pop r28
 695               	.LVL75:
 696 0288 0895      		ret
 697               		.cfi_endproc
 698               	.LFE16:
 700               	.global	lcd_init
 702               	lcd_init:
 703               	.LFB17:
 385:lcdpcf8574/lcdpcf8574.c **** 
 386:lcdpcf8574/lcdpcf8574.c **** 
 387:lcdpcf8574/lcdpcf8574.c **** /*************************************************************************
 388:lcdpcf8574/lcdpcf8574.c **** Initialize display and select type of cursor 
 389:lcdpcf8574/lcdpcf8574.c **** Input:    dispAttr LCD_DISP_OFF            display off
 390:lcdpcf8574/lcdpcf8574.c ****                    LCD_DISP_ON             display on, cursor off
 391:lcdpcf8574/lcdpcf8574.c ****                    LCD_DISP_ON_CURSOR      display on, cursor on
 392:lcdpcf8574/lcdpcf8574.c ****                    LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
 393:lcdpcf8574/lcdpcf8574.c **** Returns:  none
 394:lcdpcf8574/lcdpcf8574.c **** *************************************************************************/
 395:lcdpcf8574/lcdpcf8574.c **** void lcd_init(uint8_t dispAttr)
 396:lcdpcf8574/lcdpcf8574.c **** {
 704               		.loc 1 396 0
 705               		.cfi_startproc
 706               	.LVL76:
 707 028a 1F93      		push r17
 708               	.LCFI9:
 709               		.cfi_def_cfa_offset 3
 710               		.cfi_offset 17, -2
 711 028c CF93      		push r28
 712               	.LCFI10:
 713               		.cfi_def_cfa_offset 4
 714               		.cfi_offset 28, -3
 715 028e DF93      		push r29
 716               	.LCFI11:
 717               		.cfi_def_cfa_offset 5
 718               		.cfi_offset 29, -4
 719               	/* prologue: function */
 720               	/* frame size = 0 */
 721               	/* stack size = 3 */
 722               	.L__stack_usage = 3
 723 0290 182F      		mov r17,r24
 397:lcdpcf8574/lcdpcf8574.c **** 	#if LCD_PCF8574_INIT == 1
 398:lcdpcf8574/lcdpcf8574.c **** 	//init pcf8574
 399:lcdpcf8574/lcdpcf8574.c **** 	pcf8574_init();
 724               		.loc 1 399 0
 725 0292 0E94 0000 		call pcf8574_init
 726               	.LVL77:
 400:lcdpcf8574/lcdpcf8574.c **** 	#endif
 401:lcdpcf8574/lcdpcf8574.c **** 
 402:lcdpcf8574/lcdpcf8574.c **** 	dataport = 0;
 727               		.loc 1 402 0
 728 0296 1092 0000 		sts dataport,__zero_reg__
 403:lcdpcf8574/lcdpcf8574.c **** 	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 729               		.loc 1 403 0
 730 029a 6091 0000 		lds r22,dataport
 731 029e 80E0      		ldi r24,0
 732 02a0 0E94 0000 		call pcf8574_setoutput
 733               	.LVL78:
 734               	.LBB23:
 735               	.LBB24:
  48:lcdpcf8574/lcdpcf8574.c ****     	    "1: sbiw %0,1" "\n\t"                  
 736               		.loc 1 48 0
 737 02a4 E0E0      		ldi r30,0
 738 02a6 FAEF      		ldi r31,lo8(-6)
 739               	/* #APP */
 740               	 ;  48 "lcdpcf8574/lcdpcf8574.c" 1
 741 02a8 3197      		1: sbiw r30,1
 742 02aa 01F4      		brne 1b
 743               	 ;  0 "" 2
 744               	.LVL79:
 745               	/* #NOAPP */
 746               	.LBE24:
 747               	.LBE23:
 404:lcdpcf8574/lcdpcf8574.c **** 
 405:lcdpcf8574/lcdpcf8574.c ****     delay(16000);        /* wait 16ms or more after power-on       */
 406:lcdpcf8574/lcdpcf8574.c **** 
 407:lcdpcf8574/lcdpcf8574.c ****     /* initial write to lcd is 8bit */
 408:lcdpcf8574/lcdpcf8574.c ****     dataport |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 748               		.loc 1 408 0
 749 02ac 9091 0000 		lds r25,dataport
 750 02b0 9062      		ori r25,lo8(32)
 751 02b2 9093 0000 		sts dataport,r25
 409:lcdpcf8574/lcdpcf8574.c ****     dataport |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 752               		.loc 1 409 0
 753 02b6 9091 0000 		lds r25,dataport
 754 02ba 9061      		ori r25,lo8(16)
 755 02bc 9093 0000 		sts dataport,r25
 410:lcdpcf8574/lcdpcf8574.c ****     pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 756               		.loc 1 410 0
 757 02c0 6091 0000 		lds r22,dataport
 758 02c4 80E0      		ldi r24,0
 759 02c6 0E94 0000 		call pcf8574_setoutput
 760               	.LVL80:
 411:lcdpcf8574/lcdpcf8574.c **** 
 412:lcdpcf8574/lcdpcf8574.c ****     lcd_e_toggle();
 761               		.loc 1 412 0
 762 02ca 0E94 0000 		call toggle_e
 763               	.LVL81:
 764               	.LBB25:
 765               	.LBB26:
  48:lcdpcf8574/lcdpcf8574.c ****     	    "1: sbiw %0,1" "\n\t"                  
 766               		.loc 1 48 0
 767 02ce E0E0      		ldi r30,0
 768 02d0 FEE4      		ldi r31,lo8(78)
 769               	/* #APP */
 770               	 ;  48 "lcdpcf8574/lcdpcf8574.c" 1
 771 02d2 3197      		1: sbiw r30,1
 772 02d4 01F4      		brne 1b
 773               	 ;  0 "" 2
 774               	.LVL82:
 775               	/* #NOAPP */
 776               	.LBE26:
 777               	.LBE25:
 413:lcdpcf8574/lcdpcf8574.c ****     delay(4992);         /* delay, busy flag can't be checked here */
 414:lcdpcf8574/lcdpcf8574.c ****    
 415:lcdpcf8574/lcdpcf8574.c ****     /* repeat last command */ 
 416:lcdpcf8574/lcdpcf8574.c ****     lcd_e_toggle();      
 778               		.loc 1 416 0
 779 02d6 0E94 0000 		call toggle_e
 780               	.LVL83:
 781               	.LBB27:
 782               	.LBB28:
  48:lcdpcf8574/lcdpcf8574.c ****     	    "1: sbiw %0,1" "\n\t"                  
 783               		.loc 1 48 0
 784 02da C0E0      		ldi r28,0
 785 02dc D1E0      		ldi r29,lo8(1)
 786 02de FE01      		movw r30,r28
 787               	/* #APP */
 788               	 ;  48 "lcdpcf8574/lcdpcf8574.c" 1
 789 02e0 3197      		1: sbiw r30,1
 790 02e2 01F4      		brne 1b
 791               	 ;  0 "" 2
 792               	.LVL84:
 793               	/* #NOAPP */
 794               	.LBE28:
 795               	.LBE27:
 417:lcdpcf8574/lcdpcf8574.c ****     delay(64);           /* delay, busy flag can't be checked here */
 418:lcdpcf8574/lcdpcf8574.c ****     
 419:lcdpcf8574/lcdpcf8574.c ****     /* repeat last command a third time */
 420:lcdpcf8574/lcdpcf8574.c ****     lcd_e_toggle();      
 796               		.loc 1 420 0
 797 02e4 0E94 0000 		call toggle_e
 798               	.LVL85:
 799               	.LBB29:
 800               	.LBB30:
  48:lcdpcf8574/lcdpcf8574.c ****     	    "1: sbiw %0,1" "\n\t"                  
 801               		.loc 1 48 0
 802 02e8 FE01      		movw r30,r28
 803               	/* #APP */
 804               	 ;  48 "lcdpcf8574/lcdpcf8574.c" 1
 805 02ea 3197      		1: sbiw r30,1
 806 02ec 01F4      		brne 1b
 807               	 ;  0 "" 2
 808               	.LVL86:
 809               	/* #NOAPP */
 810               	.LBE30:
 811               	.LBE29:
 421:lcdpcf8574/lcdpcf8574.c ****     delay(64);           /* delay, busy flag can't be checked here */
 422:lcdpcf8574/lcdpcf8574.c **** 
 423:lcdpcf8574/lcdpcf8574.c ****     /* now configure for 4bit mode */
 424:lcdpcf8574/lcdpcf8574.c ****     dataport &= ~_BV(LCD_DATA0_PIN);
 812               		.loc 1 424 0
 813 02ee 9091 0000 		lds r25,dataport
 814 02f2 9F7E      		andi r25,lo8(-17)
 815 02f4 9093 0000 		sts dataport,r25
 425:lcdpcf8574/lcdpcf8574.c ****     pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 816               		.loc 1 425 0
 817 02f8 6091 0000 		lds r22,dataport
 818 02fc 80E0      		ldi r24,0
 819 02fe 0E94 0000 		call pcf8574_setoutput
 820               	.LVL87:
 426:lcdpcf8574/lcdpcf8574.c ****     lcd_e_toggle();
 821               		.loc 1 426 0
 822 0302 0E94 0000 		call toggle_e
 823               	.LVL88:
 824               	.LBB31:
 825               	.LBB32:
  48:lcdpcf8574/lcdpcf8574.c ****     	    "1: sbiw %0,1" "\n\t"                  
 826               		.loc 1 48 0
 827               	/* #APP */
 828               	 ;  48 "lcdpcf8574/lcdpcf8574.c" 1
 829 0306 2197      		1: sbiw r28,1
 830 0308 01F4      		brne 1b
 831               	 ;  0 "" 2
 832               	.LVL89:
 833               	/* #NOAPP */
 834               	.LBE32:
 835               	.LBE31:
 427:lcdpcf8574/lcdpcf8574.c ****     delay(64);           /* some displays need this additional delay */
 428:lcdpcf8574/lcdpcf8574.c ****     
 429:lcdpcf8574/lcdpcf8574.c ****     /* from now the LCD only accepts 4 bit I/O, we can use lcd_command() */    
 430:lcdpcf8574/lcdpcf8574.c **** 
 431:lcdpcf8574/lcdpcf8574.c ****     lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 836               		.loc 1 431 0
 837 030a 88E2      		ldi r24,lo8(40)
 838 030c 0E94 0000 		call lcd_command
 839               	.LVL90:
 432:lcdpcf8574/lcdpcf8574.c **** 
 433:lcdpcf8574/lcdpcf8574.c ****     lcd_command(LCD_DISP_OFF);              /* display off                  */
 840               		.loc 1 433 0
 841 0310 88E0      		ldi r24,lo8(8)
 842 0312 0E94 0000 		call lcd_command
 843               	.LVL91:
 434:lcdpcf8574/lcdpcf8574.c ****     lcd_clrscr();                           /* display clear                */
 844               		.loc 1 434 0
 845 0316 0E94 0000 		call lcd_clrscr
 846               	.LVL92:
 435:lcdpcf8574/lcdpcf8574.c ****     lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 847               		.loc 1 435 0
 848 031a 86E0      		ldi r24,lo8(6)
 849 031c 0E94 0000 		call lcd_command
 850               	.LVL93:
 436:lcdpcf8574/lcdpcf8574.c ****     lcd_command(dispAttr);                  /* display/cursor control       */
 851               		.loc 1 436 0
 852 0320 812F      		mov r24,r17
 853               	/* epilogue start */
 437:lcdpcf8574/lcdpcf8574.c **** 
 438:lcdpcf8574/lcdpcf8574.c **** }/* lcd_init */
 854               		.loc 1 438 0
 855 0322 DF91      		pop r29
 856 0324 CF91      		pop r28
 857 0326 1F91      		pop r17
 858               	.LVL94:
 436:lcdpcf8574/lcdpcf8574.c ****     lcd_command(dispAttr);                  /* display/cursor control       */
 859               		.loc 1 436 0
 860 0328 0C94 0000 		jmp lcd_command
 861               	.LVL95:
 862               		.cfi_endproc
 863               	.LFE17:
 865               	.global	dataport
 866               		.section .bss
 869               	dataport:
 870 0000 00        		.zero	1
 871               		.comm	pcf8574_pinstatus,8,1
 872               		.text
 873               	.Letext0:
 874               		.file 2 "c:\\winavr-20100110\\avr\\include\\stdint.h"
 875               		.file 3 "lcdpcf8574/../pcf8574/pcf8574.h"
DEFINED SYMBOLS
                            *ABS*:00000000 lcdpcf8574.c
C:\Users\MUKHTA~1\AppData\Local\Temp\cc4IWfkv.s:2      *ABS*:0000003e __SP_H__
C:\Users\MUKHTA~1\AppData\Local\Temp\cc4IWfkv.s:3      *ABS*:0000003d __SP_L__
C:\Users\MUKHTA~1\AppData\Local\Temp\cc4IWfkv.s:4      *ABS*:0000003f __SREG__
C:\Users\MUKHTA~1\AppData\Local\Temp\cc4IWfkv.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\MUKHTA~1\AppData\Local\Temp\cc4IWfkv.s:6      *ABS*:00000001 __zero_reg__
C:\Users\MUKHTA~1\AppData\Local\Temp\cc4IWfkv.s:11     .text:00000000 toggle_e
C:\Users\MUKHTA~1\AppData\Local\Temp\cc4IWfkv.s:41     .text:00000012 lcd_write
C:\Users\MUKHTA~1\AppData\Local\Temp\cc4IWfkv.s:869    .bss:00000000 dataport
C:\Users\MUKHTA~1\AppData\Local\Temp\cc4IWfkv.s:221    .text:0000014c lcd_read.constprop.0
C:\Users\MUKHTA~1\AppData\Local\Temp\cc4IWfkv.s:319    .text:000001b2 lcd_waitbusy
C:\Users\MUKHTA~1\AppData\Local\Temp\cc4IWfkv.s:357    .text:000001c6 lcd_command
C:\Users\MUKHTA~1\AppData\Local\Temp\cc4IWfkv.s:389    .text:000001d8 lcd_data
C:\Users\MUKHTA~1\AppData\Local\Temp\cc4IWfkv.s:421    .text:000001ea lcd_gotoxy
C:\Users\MUKHTA~1\AppData\Local\Temp\cc4IWfkv.s:450    .text:000001f8 lcd_getxy
C:\Users\MUKHTA~1\AppData\Local\Temp\cc4IWfkv.s:469    .text:00000200 lcd_clrscr
C:\Users\MUKHTA~1\AppData\Local\Temp\cc4IWfkv.s:486    .text:00000206 lcd_led
C:\Users\MUKHTA~1\AppData\Local\Temp\cc4IWfkv.s:521    .text:00000226 lcd_home
C:\Users\MUKHTA~1\AppData\Local\Temp\cc4IWfkv.s:538    .text:0000022c lcd_putc
C:\Users\MUKHTA~1\AppData\Local\Temp\cc4IWfkv.s:607    .text:00000254 lcd_puts
C:\Users\MUKHTA~1\AppData\Local\Temp\cc4IWfkv.s:649    .text:0000026c lcd_puts_p
C:\Users\MUKHTA~1\AppData\Local\Temp\cc4IWfkv.s:702    .text:0000028a lcd_init
                            *COM*:00000008 pcf8574_pinstatus

UNDEFINED SYMBOLS
pcf8574_setoutputpinhigh
pcf8574_setoutputpinlow
pcf8574_setoutput
pcf8574_getoutputpin
pcf8574_init
__do_clear_bss
